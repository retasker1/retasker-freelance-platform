import { useLoaderData, Link, useSearchParams } from "react-router";
import type { Route } from "./+types/orders";
import { useUser } from "../hooks/useUser";
import { useState } from "react";
import { DealResponseForm } from "../components/DealResponseForm";

export function meta({}: Route.MetaArgs) {
  return [
    { title: "–ó–∞–∫–∞–∑—ã ‚Äî Retasker" },
    { name: "description", content: "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ —Ñ—Ä–∏–ª–∞–Ω—Å–∞ Retasker" },
  ];
}

export async function loader({ request }: Route.LoaderArgs) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const authHeader = request.headers.get("Authorization");
  const cookieHeader = request.headers.get("Cookie");
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  if (!authHeader && !cookieHeader) {
    throw new Response("Unauthorized", { 
      status: 401,
      headers: {
        "Location": "/login"
      }
    });
  }

  const url = new URL(request.url);
  const view = url.searchParams.get("view"); // ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const status = url.searchParams.get("status") || "";
  const search = url.searchParams.get("search") || "";
  const category = url.searchParams.get("category") || "";
  const priority = url.searchParams.get("priority") || "";
  const sortBy = url.searchParams.get("sortBy") || "createdAt";
  const sortOrder = url.searchParams.get("sortOrder") || "desc";
  const viewMode = url.searchParams.get("viewMode") || "all"; // "all" –∏–ª–∏ "my"
  const page = parseInt(url.searchParams.get("page") || "1");
  const limit = parseInt(url.searchParams.get("limit") || "10");

  // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  if (view) {
    try {
      const { prisma } = await import("../lib/prisma");
      const order = await prisma.order.findUnique({
        where: { id: view },
        select: {
          id: true,
          shortCode: true,
          title: true,
          description: true,
          budgetCents: true,
          status: true,
          category: true,
          priority: true,
          workType: true,
          tags: true,
          deadline: true,
          createdAt: true,
          updatedAt: true,
          customerId: true,
          customer: {
            select: {
              id: true,
              firstName: true,
              lastName: true,
              username: true,
              photoUrl: true,
            },
          },
          deals: {
            include: {
              freelancer: {
                select: {
                  id: true,
                  firstName: true,
                  lastName: true,
                  username: true,
                  photoUrl: true,
                },
              },
            },
          },
        },
      });

      if (!order) {
        throw new Response("Order not found", { status: 404 });
      }

      return { 
        order, 
        isOrderView: true,
        filters: { status, search, category, priority, sortBy, sortOrder, viewMode, page, limit }
      };
    } catch (error) {
      console.error("Failed to load order:", error);
      throw new Response("Internal server error", { status: 500 });
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ localStorage —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É
  // –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  let userId = null;
  
  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å userId
  // –ü–æ–∫–∞ —á—Ç–æ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
  const urlUserId = url.searchParams.get("userId");
  if (urlUserId) {
    userId = urlUserId;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è fetch
  const apiUrl = new URL("/api/orders", url.origin);
  apiUrl.searchParams.set("status", status);
  apiUrl.searchParams.set("search", search);
  apiUrl.searchParams.set("category", category);
  apiUrl.searchParams.set("priority", priority);
  apiUrl.searchParams.set("sortBy", sortBy);
  apiUrl.searchParams.set("sortOrder", sortOrder);
  apiUrl.searchParams.set("viewMode", viewMode);
  apiUrl.searchParams.set("page", page.toString());
  apiUrl.searchParams.set("limit", limit.toString());
  if (userId) {
    apiUrl.searchParams.set("userId", userId);
  }

  const response = await fetch(apiUrl.toString());
  if (!response.ok) {
    throw new Response("Failed to load orders", { status: response.status });
  }
  
  const data = await response.json();
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log("Orders loader:", {
    viewMode,
    userId,
    ordersCount: data.orders?.length || 0,
    filters: { status, search, category, priority, sortBy, sortOrder, viewMode, page, limit }
  });
  
  return { 
    ...data, 
    isOrderView: false,
    filters: { status, search, category, priority, sortBy, sortOrder, viewMode, page, limit }
  };
}

export default function OrdersPage() {
  const data = useLoaderData<typeof loader>();
  const { user, loading } = useUser();
  const [showDealForm, setShowDealForm] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<any>(null);

  const handleDealResponse = (order: any) => {
    setSelectedOrder(order);
    setShowDealForm(true);
  };

  const handleDealSuccess = () => {
    setShowDealForm(false);
    setSelectedOrder(null);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    window.location.reload();
  };

  const handleDealCancel = () => {
    setShowDealForm(false);
    setSelectedOrder(null);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (loading) {
    return (
      <div className="px-4 py-6 sm:px-0">
        <div className="max-w-4xl mx-auto">
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
          </div>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!user) {
    return (
      <div className="px-4 py-6 sm:px-0">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white shadow rounded-lg p-6 text-center">
            <div className="text-6xl mb-4">üîí</div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </h3>
            <p className="text-gray-600 mb-6">
              –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </p>
            <a
              href="/login"
              className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </div>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  if (data.isOrderView && data.order) {
    const order = data.order;
    const isOwner = user.id === order.customerId;
    const canRespond = !isOwner && order.status === 'OPEN';

    return (
      <>
        <div className="px-4 py-6 sm:px-0">
          <div className="max-w-4xl mx-auto">
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="mb-6">
              <Link 
                to="/orders" 
                className="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
              >
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
              </Link>
            </div>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <div className="flex justify-between items-start mb-6">
              <div className="flex-1 min-w-0 pr-6">
                <div className="flex items-center gap-3 mb-4 flex-wrap">
                  <h1 className="text-3xl font-bold text-gray-900 truncate">
                    {order.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                  </h1>
                  {order.priority === 'URGENT' && (
                    <span className="inline-flex items-center px-3 py-1 text-sm font-semibold rounded-full bg-red-100 text-red-800 flex-shrink-0">
                      üî• –°—Ä–æ—á–Ω–æ
                    </span>
                  )}
                  {order.priority === 'HIGH' && (
                    <span className="inline-flex items-center px-3 py-1 text-sm font-semibold rounded-full bg-orange-100 text-orange-800 flex-shrink-0">
                      ‚ö° –í—ã—Å–æ–∫–∏–π
                    </span>
                  )}
                  {order.priority === 'LOW' && (
                    <span className="inline-flex items-center px-3 py-1 text-sm font-semibold rounded-full bg-blue-100 text-blue-800 flex-shrink-0">
                      üìã –ù–∏–∑–∫–∏–π
                    </span>
                  )}
                  <span className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full flex-shrink-0 ${
                    order.status === 'OPEN' ? 'bg-green-100 text-green-800' :
                    order.status === 'IN_PROGRESS' ? 'bg-yellow-100 text-yellow-800' :
                    order.status === 'COMPLETED' ? 'bg-blue-100 text-blue-800' :
                    order.status === 'CANCELLED' ? 'bg-red-100 text-red-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {order.status === 'OPEN' ? '–û—Ç–∫—Ä—ã—Ç' :
                     order.status === 'IN_PROGRESS' ? '–í —Ä–∞–±–æ—Ç–µ' :
                     order.status === 'COMPLETED' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                     order.status === 'CANCELLED' ? '–û—Ç–º–µ–Ω–µ–Ω' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                  </span>
                </div>
                
                <p className="text-gray-700 text-lg leading-relaxed mb-6 break-words">
                  {order.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                </p>
              </div>
              
              <div className="text-right flex-shrink-0">
                <div className="text-3xl font-bold text-green-600 mb-2">
                  ${order.budgetCents ? (order.budgetCents / 100).toFixed(0) : '0'}
                </div>
                <div className="text-sm text-gray-500 whitespace-nowrap">
                  {order.workType === 'FIXED' ? '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞' :
                   order.workType === 'HOURLY' ? '–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞' : 
                   order.workType === 'MILESTONE' ? '–ü–æ —ç—Ç–∞–ø–∞–º' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </div>
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</h3>
                <span className="inline-flex items-center px-3 py-1 text-sm font-medium rounded-full bg-indigo-100 text-indigo-800 max-w-full truncate">
                  {order.category === 'web' ? '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' :
                   order.category === 'mobile' ? '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' :
                   order.category === 'design' ? '–î–∏–∑–∞–π–Ω' :
                   order.category === 'marketing' ? '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' :
                   order.category === 'writing' ? '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥' :
                   order.category === 'ai' ? '–ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' :
                   order.category === 'blockchain' ? '–ë–ª–æ–∫—á–µ–π–Ω' : 
                   order.category || '–î—Ä—É–≥–æ–µ'}
                </span>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">–î–µ–¥–ª–∞–π–Ω</h3>
                <p className="text-sm text-gray-900 break-words">
                  {order.deadline ? new Date(order.deadline).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">–°–æ–∑–¥–∞–Ω</h3>
                <p className="text-sm text-gray-900 break-words">
                  {order.createdAt ? new Date(order.createdAt).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </p>
              </div>
            </div>

            {/* –¢–µ–≥–∏ */}
            {order.tags && (
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-3">–¢–µ–≥–∏</h3>
                <div className="flex flex-wrap gap-2">
                  {(() => {
                    try {
                      const tags = JSON.parse(order.tags);
                      return tags.map((tag: string, index: number) => (
                        <span key={index} className="inline-flex items-center px-3 py-1 text-sm font-medium rounded-full bg-gray-100 text-gray-800 max-w-full truncate">
                          {tag}
                        </span>
                      ));
                    } catch (error) {
                      console.error("Error parsing tags:", error);
                      return null;
                    }
                  })()}
                </div>
              </div>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ */}
            <div className="border-t pt-6">
              <h3 className="text-sm font-medium text-gray-700 mb-3">–ó–∞–∫–∞–∑—á–∏–∫</h3>
              <div className="flex items-center">
                {order.customer?.photoUrl && (
                  <img 
                    src={order.customer.photoUrl} 
                    alt={order.customer?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                    className="w-10 h-10 rounded-full mr-3 flex-shrink-0"
                  />
                )}
                <div className="min-w-0 flex-1">
                  <p className="text-sm font-medium text-gray-900 truncate">
                    {order.customer?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} {order.customer?.lastName || ''}
                  </p>
                  {order.customer?.username && (
                    <p className="text-sm text-gray-500 truncate">@{order.customer.username}</p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="bg-white shadow rounded-lg p-6">
            <div className="flex justify-between items-center flex-wrap gap-4">
              <div className="flex-1 min-w-0">
                {isOwner ? (
                  <div className="flex space-x-3 flex-wrap">
                    <button className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 text-sm font-medium whitespace-nowrap">
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑
                    </button>
                    <button className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm font-medium whitespace-nowrap">
                      –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                  </div>
                ) : canRespond ? (
                  <button 
                    onClick={() => {
                      setSelectedOrder(order);
                      setShowDealForm(true);
                    }}
                    className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 text-sm font-medium whitespace-nowrap"
                  >
                    –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑
                  </button>
                ) : (
                  <p className="text-gray-500 text-sm break-words">
                    {order.status !== 'OPEN' ? '–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤' : '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –∑–∞–∫–∞–∑'}
                  </p>
                )}
              </div>
              
              <div className="text-sm text-gray-500 whitespace-nowrap">
                ID –∑–∞–∫–∞–∑–∞: {order.shortCode || order.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      {showDealForm && selectedOrder && (
        <DealResponseForm
          orderId={selectedOrder.id || ''}
          orderTitle={selectedOrder.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
          orderBudget={selectedOrder.budgetCents ? selectedOrder.budgetCents / 100 : 0}
          onSuccess={handleDealSuccess}
          onCancel={handleDealCancel}
        />
      )}
    </>
    );
  }

  // –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  const { orders, filters, pagination } = data;

  return (
    <>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ */}
      <div className="px-4 py-6 sm:px-0">
        <div className="max-w-4xl mx-auto">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                –ó–∞–∫–∞–∑—ã
              </h1>
              <p className="mt-1 text-sm text-gray-500">
                –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π
              </p>
            </div>
            <Link
              to="/orders/new"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            </Link>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–æ–∏—Å–∫
                </label>
                <input
                  type="text"
                  id="search"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
              <div>
                <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                </label>
                <select
                  id="category"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                >
                  <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                  <option value="web">–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</option>
                  <option value="mobile">–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</option>
                  <option value="design">–î–∏–∑–∞–π–Ω</option>
                  <option value="marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</option>
                  <option value="writing">–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥</option>
                  <option value="ai">–ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</option>
                  <option value="blockchain">–ë–ª–æ–∫—á–µ–π–Ω</option>
                  <option value="other">–î—Ä—É–≥–æ–µ</option>
                </select>
              </div>
              <div>
                <label htmlFor="priority" className="block text-sm font-medium text-gray-700 mb-1">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                </label>
                <select
                  id="priority"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                >
                  <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                  <option value="URGENT">–°—Ä–æ—á–Ω–æ</option>
                  <option value="MEDIUM">–û–±—ã—á–Ω—ã–π</option>
                </select>
              </div>
              <div>
                <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                  –°—Ç–∞—Ç—É—Å
                </label>
                <select
                  id="status"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                >
                  <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                  <option value="OPEN">–û—Ç–∫—Ä—ã—Ç</option>
                  <option value="IN_PROGRESS">–í —Ä–∞–±–æ—Ç–µ</option>
                  <option value="COMPLETED">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                  <option value="CANCELLED">–û—Ç–º–µ–Ω–µ–Ω</option>
                </select>
              </div>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
          <div className="space-y-6">
            {orders && orders.length > 0 ? (
              orders.map((order: any) => (
                <div key={order.id} className="bg-white shadow rounded-lg p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1 min-w-0 pr-4">
                      <h3 className="text-lg font-semibold text-gray-900 mb-2 truncate">
                        {order.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                      </h3>
                      <p className="text-gray-600 mb-4 line-clamp-3 break-words">
                        {order.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </p>
                    </div>
                    <div className="text-right flex-shrink-0">
                      <div className="text-2xl font-bold text-green-600 mb-1">
                        ${order.budgetCents ? (order.budgetCents / 100).toFixed(0) : '0'}
                      </div>
                      <div className="text-sm text-gray-500 whitespace-nowrap">
                        {order.workType === 'FIXED' ? '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞' :
                         order.workType === 'HOURLY' ? '–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞' : 
                         order.workType === 'MILESTONE' ? '–ü–æ —ç—Ç–∞–ø–∞–º' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-4">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        order.status === 'OPEN' ? 'bg-green-100 text-green-800' :
                        order.status === 'IN_PROGRESS' ? 'bg-yellow-100 text-yellow-800' :
                        order.status === 'COMPLETED' ? 'bg-blue-100 text-blue-800' :
                        order.status === 'CANCELLED' ? 'bg-red-100 text-red-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {order.status === 'OPEN' ? '–û—Ç–∫—Ä—ã—Ç' :
                         order.status === 'IN_PROGRESS' ? '–í —Ä–∞–±–æ—Ç–µ' :
                         order.status === 'COMPLETED' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                         order.status === 'CANCELLED' ? '–û—Ç–º–µ–Ω–µ–Ω' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </span>
                      
                      <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-indigo-100 text-indigo-800">
                        {order.category === 'web' ? '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' :
                         order.category === 'mobile' ? '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' :
                         order.category === 'design' ? '–î–∏–∑–∞–π–Ω' :
                         order.category === 'marketing' ? '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' :
                         order.category === 'writing' ? '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥' :
                         order.category === 'ai' ? '–ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' :
                         order.category === 'blockchain' ? '–ë–ª–æ–∫—á–µ–π–Ω' : 
                         order.category || '–î—Ä—É–≥–æ–µ'}
                      </span>

                      {order.priority === 'URGENT' && (
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                          üî• –°—Ä–æ—á–Ω–æ
                        </span>
                      )}
                      {order.priority === 'HIGH' && (
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-orange-100 text-orange-800">
                          ‚ö° –í—ã—Å–æ–∫–∏–π
                        </span>
                      )}
                      {order.priority === 'LOW' && (
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                          üìã –ù–∏–∑–∫–∏–π
                        </span>
                      )}
                    </div>

                    <div className="text-sm text-gray-500">
                      {order.createdAt ? new Date(order.createdAt).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                    </div>
                  </div>

                  {/* –¢–µ–≥–∏ */}
                  {order.tags && (
                    <div className="mb-4">
                      <div className="flex flex-wrap gap-2">
                        {(() => {
                          try {
                            const tags = JSON.parse(order.tags);
                            return tags.map((tag: string, index: number) => (
                              <span key={index} className="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800 max-w-full truncate">
                                {tag}
                              </span>
                            ));
                          } catch (error) {
                            console.error("Error parsing tags:", error);
                            return null;
                          }
                        })()}
                      </div>
                    </div>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                  <div className="flex justify-end gap-2 mt-4 pt-4 border-t border-gray-200 flex-wrap">
                    <Link 
                      to={`/orders?view=${order.id}`}
                      className="px-3 py-1 text-sm text-indigo-600 hover:text-indigo-800 font-medium whitespace-nowrap"
                    >
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </Link>
                    {order.status === 'OPEN' && user && user.id !== order.customerId && (
                      <button 
                        onClick={() => handleDealResponse(order)}
                        className="px-3 py-1 text-sm bg-indigo-600 text-white rounded-md hover:bg-indigo-700 font-medium whitespace-nowrap"
                      >
                        –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                      </button>
                    )}
                    {order.status === 'OPEN' && user && user.id === order.customerId && (
                      <span className="px-3 py-1 text-sm text-gray-500 font-medium whitespace-nowrap">
                        –í–∞—à –∑–∞–∫–∞–∑
                      </span>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">üìã</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </h3>
                <p className="text-gray-500 mb-6">
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                </p>
                <Link
                  to="/orders/new"
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700"
                >
                  –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                </Link>
              </div>
            )}
          </div>

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          {pagination && pagination.totalPages > 1 && (
            <div className="mt-8 flex justify-center">
              <nav className="flex space-x-2">
                {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map((page) => (
                  <Link
                    key={page}
                    to={`/orders?page=${page}`}
                    className={`px-3 py-2 text-sm font-medium rounded-md ${
                      page === pagination.currentPage
                        ? 'bg-indigo-600 text-white'
                        : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {page}
                  </Link>
                ))}
              </nav>
            </div>
          )}
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –æ—Ç–∫–ª–∏–∫–∞ */}
      {showDealForm && selectedOrder && (
        <DealResponseForm
          orderId={selectedOrder.id || ''}
          orderTitle={selectedOrder.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
          orderBudget={selectedOrder.budgetCents ? selectedOrder.budgetCents / 100 : 0}
          onSuccess={handleDealSuccess}
          onCancel={handleDealCancel}
        />
      )}
    </>
  );
}