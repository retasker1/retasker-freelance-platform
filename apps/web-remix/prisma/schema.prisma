// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Модель пользователя
model User {
  id        String   @id @default(cuid())
  telegramId String  @unique
  firstName String
  lastName  String?
  username  String?
  photoUrl  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Поля для авторизации
  authToken     String?
  tokenExpiresAt DateTime?

  // Виртуальный баланс (в центах)
  balanceCents Int @default(0)

  // Связи
  orders     Order[]     @relation("OrderCustomer")
  deals      Deal[]      @relation("DealCustomer")
  freelancerDeals Deal[] @relation("DealFreelancer")
  messages   Message[]
  responses  Response[]
  balanceTransactions BalanceTransaction[]
  ratingsGiven Rating[] @relation("RatingGiver")
  ratingsReceived Rating[] @relation("RatingReceiver")
  favorites  Favorite[]
  complaints Complaint[]

  @@map("users")
}

// Модель заказа
model Order {
  id          String   @id @default(cuid())
  shortCode   String   @unique @default("ORD-0000")
  title       String
  description String
  budgetCents Int
  status      OrderStatus @default(OPEN)
  category    String   @default("other")
  deadline    DateTime?
  priority    Priority @default(MEDIUM)
  workType    WorkType @default(FIXED)
  tags        String?  // JSON массив тегов
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  customerId String
  customer   User   @relation("OrderCustomer", fields: [customerId], references: [id])
  deals      Deal[]
  messages   Message[]
  responses  Response[]
  favorites  Favorite[]

  @@map("orders")
}

// Модель сделки
model Deal {
  id           String     @id @default(cuid())
  status       DealStatus @default(PENDING)
  amountCents  Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deliveredAt  DateTime?
  completedAt  DateTime?

  // Связи
  orderId      String
  order        Order  @relation(fields: [orderId], references: [id])
  customerId   String
  customer     User   @relation("DealCustomer", fields: [customerId], references: [id])
  freelancerId String
  freelancer   User   @relation("DealFreelancer", fields: [freelancerId], references: [id])
  messages     Message[]

  @@map("deals")
}

// Модель сообщения
model Message {
  id        String   @id @default(cuid())
  content   String
  isFromBot Boolean  @default(false)
  createdAt DateTime @default(now())

  // Связи
  userId  String?
  user    User?   @relation(fields: [userId], references: [id])
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])
  dealId  String?
  deal    Deal?   @relation(fields: [dealId], references: [id])

  @@map("messages")
}

// Енумы
enum OrderStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DealStatus {
  PENDING
  ACTIVE
  DELIVERED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkType {
  FIXED
  HOURLY
  MILESTONE
}

// Модель отклика на заказ
model Response {
  id        String   @id @default(cuid())
  message   String
  priceCents Int?    // Предлагаемая цена (если отличается от заказа)
  status    ResponseStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id])
  freelancerId String
  freelancer User  @relation(fields: [freelancerId], references: [id])

  @@map("responses")
}

// Модель транзакции баланса
model BalanceTransaction {
  id          String   @id @default(cuid())
  amountCents Int      // Положительное - пополнение, отрицательное - списание
  type        TransactionType
  description String?
  createdAt   DateTime @default(now())

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
  dealId String? // Связанная сделка (если транзакция связана со сделкой)

  @@map("balance_transactions")
}

// Модель рейтинга
model Rating {
  id        String   @id @default(cuid())
  score     Int      // 1-5 звезд
  comment   String?
  createdAt DateTime @default(now())

  // Связи
  giverId   String
  giver     User    @relation("RatingGiver", fields: [giverId], references: [id])
  receiverId String
  receiver  User    @relation("RatingReceiver", fields: [receiverId], references: [id])
  dealId    String? // Связанная сделка

  @@map("ratings")
}

// Модель избранного
model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Связи
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@unique([userId, orderId])
  @@map("favorites")
}

// Модель жалобы
model Complaint {
  id          String   @id @default(cuid())
  reason      ComplaintReason
  description String
  status      ComplaintStatus @default(PENDING)
  adminNotes  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  complainantId String
  complainant   User   @relation(fields: [complainantId], references: [id])
  dealId        String? // Связанная сделка (если жалоба на сделку)

  @@map("complaints")
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TransactionType {
  DEPOSIT      // Пополнение
  WITHDRAWAL   // Списание
  DEAL_PAYMENT // Платеж по сделке
  REFUND       // Возврат
  ADMIN_ADJUSTMENT // Админская корректировка
}

enum ComplaintReason {
  FRAUD        // Мошенничество
  POOR_QUALITY // Плохое качество
  NON_DELIVERY // Недоставка
  INAPPROPRIATE_BEHAVIOR // Неподобающее поведение
  OTHER        // Другое
}

enum ComplaintStatus {
  PENDING    // Ожидает рассмотрения
  IN_REVIEW  // На рассмотрении
  RESOLVED   // Решена
  REJECTED   // Отклонена
}
