import { Context } from 'telegraf';

export async function complaintHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await botCtx.apiService.getUserDeals(botCtx.userId);
    const complaintableDeals = deals.filter((deal: any) => 
      deal.status === 'ACTIVE' || deal.status === 'DELIVERED'
    );
    
    if (!complaintableDeals || complaintableDeals.length === 0) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.\n\n' +
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏: /my_deals');
      return;
    }

    let message = '‚ö†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã:</b>\n\n';
    
    complaintableDeals.slice(0, 5).forEach((deal: any, index: number) => {
      const budget = (deal.amountCents / 100).toFixed(0);
      
      const statusEmoji: Record<string, string> = {
        'ACTIVE': 'üü¢',
        'DELIVERED': 'üì¶'
      };
      
      const statusText: Record<string, string> = {
        'ACTIVE': '–í —Ä–∞–±–æ—Ç–µ',
        'DELIVERED': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      };
      
      const emoji = statusEmoji[deal.status] || '‚ùì';
      const text = statusText[deal.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      message += `${index + 1}. ${emoji} <b>–°–¥–µ–ª–∫–∞ #${deal.id.substring(0, 8)}</b>\n` +
        `üí∞ –°—É–º–º–∞: $${budget}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${text}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.createdAt).toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = {
      inline_keyboard: complaintableDeals.slice(0, 5).map((deal: any) => [
        { text: `‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ #${deal.id.substring(0, 8)}`, callback_data: `complaint_${deal.id}` }
      ])
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in complaint handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function startComplaint(ctx: Context, dealId: string) {
  try {
    const message = '‚ö†Ô∏è <b>–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã</b>\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:';

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', callback_data: `complaint_reason_quality_${dealId}` },
          { text: '‚è∞ –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤', callback_data: `complaint_reason_deadline_${dealId}` }
        ],
        [
          { text: 'üí¨ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ', callback_data: `complaint_reason_communication_${dealId}` },
          { text: 'üö´ –û—Ç–∫–∞–∑ –æ—Ç —Ä–∞–±–æ—Ç—ã', callback_data: `complaint_reason_refusal_${dealId}` }
        ],
        [
          { text: 'üîç –î—Ä—É–≥–æ–µ', callback_data: `complaint_reason_other_${dealId}` }
        ],
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'my_deals' }
        ]
      ]
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error starting complaint:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleComplaintReason(ctx: Context, reason: string) {
  try {
    const botCtx = ctx as any;
    
    // –ü–∞—Ä—Å–∏–º reason –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è dealId
    const parts = reason.split('_');
    const reasonType = parts[0];
    const dealId = parts[1];
    
    const reasonTexts: Record<string, string> = {
      'quality': '–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      'deadline': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤',
      'communication': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ',
      'refusal': '–û—Ç–∫–∞–∑ –æ—Ç —Ä–∞–±–æ—Ç—ã',
      'other': '–î—Ä—É–≥–æ–µ'
    };
    
    const reasonText = reasonTexts[reasonType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    botCtx.dealId = dealId;
    botCtx.complaintReason = reasonText;
    
    await ctx.reply(`üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã</b>\n\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${reasonText}\n\n` +
      `–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.`, 
      { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error handling complaint reason:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function submitComplaint(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId || !botCtx.dealId || !botCtx.complaintReason) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const description = (ctx.message as any)?.text || '';
    
    if (!description || description.length < 10) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
    const success = await botCtx.apiService.createComplaint(
      botCtx.dealId, 
      botCtx.userId, 
      botCtx.complaintReason, 
      description
    );

    if (success) {
      await ctx.reply('‚úÖ <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!</b>\n\n' +
        '–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n\n' +
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!', { parse_mode: 'HTML' });
      
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      botCtx.dealId = undefined;
      botCtx.complaintReason = undefined;
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('Error submitting complaint:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
