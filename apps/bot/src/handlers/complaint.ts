import { Context } from 'telegraf';
import { BotContext, Deal } from '../types';

export async function complaintHandler(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService!;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await apiService.getUserDeals(botCtx.userId);
    
    if (deals.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–∞–π—Ç–µ: https://retasker.com'
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    const keyboard = {
      reply_markup: {
        inline_keyboard: deals.map((deal: Deal) => [
          {
            text: `${deal.order.title} - $${(deal.order.budgetCents / 100).toFixed(2)}`,
            callback_data: `complaint_${deal.id}`
          }
        ])
      }
    };

    await ctx.reply(
      '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã:',
      keyboard
    );
    
  } catch (error) {
    console.error('Error in complaint handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function startComplaint(ctx: Context, dealId: string) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService!;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
    const deal = await apiService.getDeal(dealId);
    if (!deal) {
      await ctx.reply('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º dealId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã
    botCtx.dealId = dealId;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ùå –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', callback_data: 'complaint_reason_quality' },
            { text: '‚è∞ –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤', callback_data: 'complaint_reason_deadline' }
          ],
          [
            { text: 'üí∞ –°–ø–æ—Ä –ø–æ –æ–ø–ª–∞—Ç–µ', callback_data: 'complaint_reason_payment' },
            { text: 'üö´ –ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ', callback_data: 'complaint_reason_behavior' }
          ],
          [
            { text: 'üìù –î—Ä—É–≥–æ–µ', callback_data: 'complaint_reason_other' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `deal_${dealId}` }
          ]
        ]
      }
    };

    await ctx.reply(
      `‚ö†Ô∏è –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã\n\n` +
      `–°–¥–µ–ª–∫–∞: ${deal.order.title}\n` +
      `–°—É–º–º–∞: $${(deal.order.budgetCents / 100).toFixed(2)}\n` +
      `–°—Ç–∞—Ç—É—Å: ${deal.status}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:`,
      keyboard
    );
    
  } catch (error) {
    console.error('Error starting complaint:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleComplaintReason(ctx: Context, reason: string) {
  const botCtx = ctx as BotContext;
  
  try {
    if (!botCtx.dealId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –¥–ª—è –∂–∞–ª–æ–±—ã.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    botCtx.complaintReason = reason;

    const reasonTexts = {
      'quality': '–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      'deadline': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤',
      'payment': '–°–ø–æ—Ä –ø–æ –æ–ø–ª–∞—Ç–µ',
      'behavior': '–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ',
      'other': '–î—Ä—É–≥–æ–µ'
    };

    await ctx.reply(
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã\n\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${reasonTexts[reason as keyof typeof reasonTexts]}\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. ` +
      `–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:`
    );
    
  } catch (error) {
    console.error('Error handling complaint reason:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function submitComplaint(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService!;
  
  try {
    if (!botCtx.userId || !botCtx.dealId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.');
      return;
    }

    const reason = botCtx.complaintReason;
    if (!reason) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
    const success = await apiService.createComplaint(
      botCtx.dealId, 
      botCtx.userId, 
      reason
    );
    
    if (success) {
      await ctx.reply(
        '‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n' +
        '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ' +
        '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'
      );
      
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      botCtx.complaintReason = undefined;
      botCtx.dealId = undefined;
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
  } catch (error) {
    console.error('Error submitting complaint:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
