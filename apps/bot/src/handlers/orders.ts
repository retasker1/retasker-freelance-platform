import { Context } from 'telegraf';

export async function ordersHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService) {
      await ctx.reply('‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã
    const orders = await botCtx.apiService.getOpenOrders();
    
    if (!orders || orders.length === 0) {
      await ctx.reply('üìã –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ: https://retasker.com/orders/new');
      return;
    }

    let message = 'üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n';
    
    orders.slice(0, 10).forEach((order: any, index: number) => {
      const budget = (order.budgetCents / 100).toFixed(0);
      const deadline = order.deadline ? 
        new Date(order.deadline).toLocaleDateString('ru-RU') : 
        '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      message += `${index + 1}. <b>${order.title}</b>\n` +
        `üí∞ –ë—é–¥–∂–µ—Ç: $${budget}\n` +
        `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline}\n` +
        `üìù ${order.description.substring(0, 100)}${order.description.length > 100 ? '...' : ''}\n\n`;
    });

    if (orders.length > 10) {
      message += `... –∏ –µ—â–µ ${orders.length - 10} –∑–∞–∫–∞–∑–æ–≤\n\n`;
    }

    message += 'üí° <b>–ö–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:</b>\n' +
      '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://retasker.com/orders\n' +
      '2. –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–∫–∞–∑\n' +
      '3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"\n' +
      '4. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞';

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in orders handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function myOrdersHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orders = await botCtx.apiService.getUserOrders(botCtx.userId);
    
    if (!orders || orders.length === 0) {
      await ctx.reply('üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ: https://retasker.com/orders/new');
      return;
    }

    let message = 'üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n';
    
    orders.forEach((order: any, index: number) => {
      const budget = (order.budgetCents / 100).toFixed(0);
      const deadline = order.deadline ? 
        new Date(order.deadline).toLocaleDateString('ru-RU') : 
        '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      const statusEmoji: Record<string, string> = {
        'OPEN': 'üü¢',
        'IN_PROGRESS': 'üü°',
        'COMPLETED': '‚úÖ',
        'CANCELLED': '‚ùå'
      };
      
      const statusText: Record<string, string> = {
        'OPEN': '–û—Ç–∫—Ä—ã—Ç',
        'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ',
        'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω'
      };
      
      const emoji = statusEmoji[order.status] || '‚ùì';
      const text = statusText[order.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      message += `${index + 1}. ${emoji} <b>${order.title}</b>\n` +
        `üí∞ –ë—é–¥–∂–µ—Ç: $${budget}\n` +
        `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${text}\n` +
        `üìù ${order.description.substring(0, 80)}${order.description.length > 80 ? '...' : ''}\n\n`;
    });

    message += 'üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:</b>\n' +
      '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://retasker.com/orders';

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in my orders handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
