import { Context } from 'telegraf';

export async function startHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    const telegramId = ctx.from?.id.toString();
    
    if (!telegramId || !botCtx.apiService) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await botCtx.apiService.getUserByTelegramId(telegramId);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      try {
        const authResponse = await botCtx.apiService.client.post('/api/auth/telegram', {
          id: ctx.from?.id,
          first_name: ctx.from?.first_name,
          last_name: ctx.from?.last_name,
          username: ctx.from?.username,
          photo_url: undefined, // Telegram User type doesn't have photo_url
          auth_date: Math.floor(Date.now() / 1000),
          hash: 'dev_hash' // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É hash
        });
        
        if (authResponse.data && authResponse.data.user) {
          user = authResponse.data.user;
          console.log('New user created:', user);
        }
      } catch (error) {
        console.error('Error creating user:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
    }

    if (user) {
      botCtx.userId = user.id;
      console.log('User authenticated:', user.id);
    }

    const welcomeMessage = `ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Retasker!</b>\n\n` +
      `–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! üëã\n\n` +
      `Retasker - —ç—Ç–æ –±–∏—Ä–∂–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–∞ –≤ Telegram —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏.\n\n` +
      `üìã <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–∞–π—Ç–µ\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–¥–µ–ª–∫–∞–º–∏\n` +
      `‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏\n\n` +
      `üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑: https://retasker.com/orders/new\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã: /orders\n` +
      `‚Ä¢ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã: /my_orders\n` +
      `‚Ä¢ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏: /my_deals\n\n` +
      `üí° <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ó–∞–∫–∞–∑—ã', callback_data: 'orders' },
          { text: 'üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }
        ],
        [
          { text: 'ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏', callback_data: 'my_deals' },
          { text: 'üí¨ –ß–∞—Ç', callback_data: 'chat_menu' }
        ],
        [
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]
      ]
    };

    await ctx.reply(welcomeMessage, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in start handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function showDealInfo(ctx: Context, deal: any, userId: string) {
  try {
    const budget = (deal.amountCents / 100).toFixed(0);
    const statusEmoji: Record<string, string> = {
      'PENDING': '‚è≥',
      'ACTIVE': 'üü¢',
      'DELIVERED': 'üì¶',
      'COMPLETED': '‚úÖ',
      'CANCELLED': '‚ùå'
    };
    
    const statusText: Record<string, string> = {
      'PENDING': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'ACTIVE': '–í —Ä–∞–±–æ—Ç–µ',
      'DELIVERED': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
      'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
    };
    
    const emoji = statusEmoji[deal.status] || '‚ùì';
    const text = statusText[deal.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    let message = `ü§ù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ</b>\n\n` +
      `üí∞ –°—É–º–º–∞: $${budget}\n` +
      `üìä –°—Ç–∞—Ç—É—Å: ${emoji} ${text}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.createdAt).toLocaleDateString('ru-RU')}\n\n`;

    if (deal.order) {
      message += `üìã <b>–ó–∞–∫–∞–∑:</b>\n` +
        `‚Ä¢ ${deal.order.title}\n` +
        `‚Ä¢ ${deal.order.description.substring(0, 100)}${deal.order.description.length > 100 ? '...' : ''}\n\n`;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', callback_data: `chat_${deal.id}` }
        ]
      ]
    };

    if (deal.status === 'ACTIVE') {
      keyboard.inline_keyboard.push([
        { text: 'üì¶ –î–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data: `deliver_${deal.id}` }
      ]);
    }

    if (deal.status === 'DELIVERED' && deal.customerId === userId) {
      keyboard.inline_keyboard.push([
        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', callback_data: `confirm_${deal.id}` }
      ]);
    }

    if (deal.status === 'ACTIVE' || deal.status === 'DELIVERED') {
      keyboard.inline_keyboard.push([
        { text: '‚ö†Ô∏è –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É', callback_data: `complaint_${deal.id}` }
      ]);
    }

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error showing deal info:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ.');
  }
}
