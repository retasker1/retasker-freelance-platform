import { Context } from 'telegraf';
import { ApiService } from '../services/api';
import { BotContext } from '../types';

export async function startHandler(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  console.log('=== START COMMAND RECEIVED ===');
  console.log('User ID:', ctx.from?.id);
  console.log('Username:', ctx.from?.username);
  console.log('First name:', ctx.from?.first_name);
  
  try {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) {
      console.log('ERROR: No telegram ID');
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    console.log('Looking for user with telegramId:', telegramId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    const user = await apiService.getUserByTelegramId(telegramId);
    
    if (!user) {
      console.log('User not found, showing registration message');
      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Retasker! üöÄ\n\n' +
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.\n' +
        '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://retasker.com\n\n' +
        '–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n' +
        '‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã\n' +
        '‚Ä¢ –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã\n' +
        '‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏\n' +
        '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–¥–µ–ª–∫–∞–º–∏'
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    botCtx.userId = user.id;
    console.log('User found, userId set to:', user.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–¥–µ–ª–∫–µ)
    const startParam = ctx.message && 'text' in ctx.message 
      ? ctx.message.text.split(' ')[1] 
      : null;

    if (startParam && startParam.startsWith('deal_')) {
      const dealId = startParam.replace('deal_', '');
      const deal = await apiService.getDeal(dealId, user.id);
      
      if (deal) {
        botCtx.dealId = dealId;
        await showDealInfo(ctx, deal, user.id);
        return;
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx, user);
    
  } catch (error) {
    console.error('Error in start handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function showMainMenu(ctx: Context, user: any) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏', callback_data: 'my_deals' },
          { text: 'üí¨ –ß–∞—Ç', callback_data: 'chat_menu' }
        ],
        [
          { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: 'https://retasker.com' },
          { text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]
      ]
    }
  };

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${user.firstName}! üëã\n\n` +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Retasker Bot!\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    keyboard
  );
}

async function showDealInfo(ctx: Context, deal: any, userId: string) {
  const isCustomer = deal.customerId === userId;
  const isFreelancer = deal.freelancerId === userId;
  
  let roleText = '';
  let actions = [];

  if (isCustomer) {
    roleText = '–í—ã - –∑–∞–∫–∞–∑—á–∏–∫';
    if (deal.status === 'delivered') {
      actions.push([{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', callback_data: `confirm_${deal.id}` }]);
    }
  } else if (isFreelancer) {
    roleText = '–í—ã - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
    if (deal.status === 'active') {
      actions.push([{ text: 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data: `deliver_${deal.id}` }]);
    }
  }

  actions.push([{ text: 'üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', callback_data: `chat_${deal.id}` }]);
  actions.push([{ text: '‚ö†Ô∏è –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É', callback_data: `complaint_${deal.id}` }]);

  const keyboard = {
    reply_markup: {
      inline_keyboard: actions
    }
  };

  const statusText = {
    'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
    'delivered': 'üü° –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
  }[deal.status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  await ctx.reply(
    `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ\n\n` +
    `üìù –ó–∞–∫–∞–∑: ${deal.order.title}\n` +
    `üí∞ –°—É–º–º–∞: $${(deal.finalPrice / 100).toFixed(2)}\n` +
    `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n` +
    `üë§ ${roleText}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    keyboard
  );
}
