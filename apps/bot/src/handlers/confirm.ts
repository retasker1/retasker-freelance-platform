import { Context } from 'telegraf';
import { BotContext } from '../types';

export async function confirmHandler(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    const deals = await apiService.getUserDeals(botCtx.userId, 'delivered');
    const customerDeals = deals.filter(deal => deal.customerId === botCtx.userId);
    
    if (customerDeals.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n' +
        '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∞—à–∏–º –∑–∞–∫–∞–∑–∞–º.'
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    const keyboard = {
      reply_markup: {
        inline_keyboard: customerDeals.map(deal => [
          {
            text: `${deal.order.title} - $${(deal.finalPrice / 100).toFixed(2)}`,
            callback_data: `confirm_${deal.id}`
          }
        ])
      }
    };

    await ctx.reply(
      '‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:',
      keyboard
    );
    
  } catch (error) {
    console.error('Error in confirm handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function confirmCompletion(ctx: Context, dealId: string) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
    const deal = await apiService.getDeal(dealId, botCtx.userId);
    if (!deal) {
      await ctx.reply('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–∫–∞–∑—á–∏–∫
    if (deal.customerId !== botCtx.userId) {
      await ctx.reply('–¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    if (deal.status !== 'delivered') {
      await ctx.reply('–°–¥–µ–ª–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ". –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.');
      return;
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', callback_data: `execute_confirm_${dealId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `deal_${dealId}` }
          ]
        ]
      }
    };

    await ctx.reply(
      `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏\n\n` +
      `–°–¥–µ–ª–∫–∞: ${deal.order.title}\n` +
      `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${deal.freelancer.firstName} ${deal.freelancer.lastName}\n` +
      `–°—É–º–º–∞: $${(deal.finalPrice / 100).toFixed(2)}\n\n` +
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É? ` +
      `–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.`,
      keyboard
    );
    
  } catch (error) {
    console.error('Error confirming completion:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function executeConfirm(ctx: Context, dealId: string) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    const success = await apiService.confirmCompletion(dealId, botCtx.userId);
    
    if (success) {
      await ctx.reply(
        'üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
        '–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é. ' +
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Retasker!'
      );
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
  } catch (error) {
    console.error('Error executing confirm:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
