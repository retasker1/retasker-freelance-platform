import { Context } from 'telegraf';

export async function chatHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await botCtx.apiService.getUserDeals(botCtx.userId);
    
    if (!deals || deals.length === 0) {
      await ctx.reply('üí¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n' +
        '–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã: /orders');
      return;
    }

    let message = 'üí¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n\n';
    
    deals.slice(0, 5).forEach((deal: any, index: number) => {
      const budget = (deal.amountCents / 100).toFixed(0);
      
      message += `${index + 1}. <b>–°–¥–µ–ª–∫–∞ #${deal.id.substring(0, 8)}</b>\n` +
        `üí∞ –°—É–º–º–∞: $${budget}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.createdAt).toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = {
      inline_keyboard: deals.slice(0, 5).map((deal: any) => [
        { text: `üí¨ –°–¥–µ–ª–∫–∞ #${deal.id.substring(0, 8)}`, callback_data: `chat_${deal.id}` }
      ])
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in chat handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function openChat(ctx: Context, dealId: string) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService) {
      await ctx.reply('‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const messages = await botCtx.apiService.getMessages(dealId);
    
    let message = 'üí¨ <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n';
    
    if (!messages || messages.length === 0) {
      message += '–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!';
    } else {
      messages.slice(-10).forEach((msg: any) => {
        const time = new Date(msg.createdAt).toLocaleString('ru-RU');
        const sender = msg.isFromBot ? 'ü§ñ –ë–æ—Ç' : 'üë§ –í—ã';
        message += `${sender} (${time}):\n${msg.content}\n\n`;
      });
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `send_msg_${dealId}` },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `refresh_chat_${dealId}` }
        ]
      ]
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error opening chat:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function sendMessage(ctx: Context, dealId: string, content: string) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await botCtx.apiService.createMessage(
      dealId, 
      botCtx.userId, 
      content, 
      false // isFromCustomer - –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    );

    if (message) {
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
      await openChat(ctx, dealId);
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('Error sending message:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
