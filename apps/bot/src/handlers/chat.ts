import { Context } from 'telegraf';
import { BotContext } from '../types';

export async function chatHandler(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await apiService.getUserDeals(botCtx.userId, 'active');
    const deliveredDeals = await apiService.getUserDeals(botCtx.userId, 'delivered');
    const allActiveDeals = [...deals, ...deliveredDeals];
    
    if (allActiveDeals.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–∞–π—Ç–µ: https://retasker.com'
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    const keyboard = {
      reply_markup: {
        inline_keyboard: allActiveDeals.map(deal => [
          {
            text: `${deal.order.title} - $${(deal.finalPrice / 100).toFixed(2)}`,
            callback_data: `chat_${deal.id}`
          }
        ])
      }
    };

    await ctx.reply(
      'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:',
      keyboard
    );
    
  } catch (error) {
    console.error('Error in chat handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function openChat(ctx: Context, dealId: string) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
    const deal = await apiService.getDeal(dealId, botCtx.userId);
    if (!deal) {
      await ctx.reply('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    const messages = await apiService.getChatMessages(dealId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º dealId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    botCtx.dealId = dealId;

    let messageText = `üí¨ –ß–∞—Ç –ø–æ —Å–¥–µ–ª–∫–µ: ${deal.order.title}\n\n`;
    
    if (messages.length === 0) {
      messageText += '–ü–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!';
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      const recentMessages = messages.slice(-10);
      for (const msg of recentMessages) {
        const sender = msg.isFromCustomer ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
        const time = new Date(msg.createdAt).toLocaleString('ru-RU');
        messageText += `${sender} (${time}):\n${msg.content}\n\n`;
      }
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `send_msg_${dealId}` }],
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `refresh_chat_${dealId}` }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º', callback_data: 'my_deals' }]
        ]
      }
    };

    await ctx.reply(messageText, keyboard);
    
  } catch (error) {
    console.error('Error opening chat:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function sendMessage(ctx: Context, dealId: string, content: string) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    const deal = await apiService.getDeal(dealId, botCtx.userId);
    if (!deal) {
      await ctx.reply('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.');
      return;
    }

    const isFromCustomer = deal.customerId === botCtx.userId;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const success = await apiService.sendMessage(dealId, botCtx.userId, content, isFromCustomer);
    
    if (success) {
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
      await openChat(ctx, dealId);
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
  } catch (error) {
    console.error('Error sending message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
