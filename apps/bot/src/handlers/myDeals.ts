import { Context } from 'telegraf';

export async function myDealsHandler(ctx: Context) {
  try {
    const botCtx = ctx as any;
    
    if (!botCtx.apiService || !botCtx.userId) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await botCtx.apiService.getUserDeals(botCtx.userId);
    
    if (!deals || deals.length === 0) {
      await ctx.reply('ü§ù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n\n' +
        '–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã: /orders');
      return;
    }

    let message = 'ü§ù <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    
    deals.forEach((deal: any, index: number) => {
      const budget = (deal.amountCents / 100).toFixed(0);
      
      const statusEmoji: Record<string, string> = {
        'PENDING': '‚è≥',
        'ACTIVE': 'üü¢',
        'DELIVERED': 'üì¶',
        'COMPLETED': '‚úÖ',
        'CANCELLED': '‚ùå'
      };
      
      const statusText: Record<string, string> = {
        'PENDING': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'ACTIVE': '–í —Ä–∞–±–æ—Ç–µ',
        'DELIVERED': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
        'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
      };
      
      const emoji = statusEmoji[deal.status] || '‚ùì';
      const text = statusText[deal.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      message += `${index + 1}. ${emoji} <b>–°–¥–µ–ª–∫–∞ #${deal.id.substring(0, 8)}</b>\n` +
        `üí∞ –°—É–º–º–∞: $${budget}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${text}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.createdAt).toLocaleDateString('ru-RU')}\n\n`;
    });

    message += 'üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏:</b>\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–¥–µ–ª–∫–∞–º–∏';

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí¨ –ß–∞—Ç', callback_data: 'chat_menu' },
          { text: 'üìã –ó–∞–∫–∞–∑—ã', callback_data: 'orders' }
        ]
      ]
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in my deals handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
