import { Context } from 'telegraf';
import { BotContext } from '../types';

export async function myDealsHandler(ctx: Context) {
  const botCtx = ctx as BotContext;
  const apiService = botCtx.apiService;
  
  try {
    if (!botCtx.userId) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deals = await apiService.getUserDeals(botCtx.userId);
    
    if (deals.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–∞–π—Ç–µ: https://retasker.com'
      );
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const activeDeals = deals.filter(d => d.status === 'active');
    const deliveredDeals = deals.filter(d => d.status === 'delivered');
    const completedDeals = deals.filter(d => d.status === 'completed');

    let message = 'üìã –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:\n\n';

    if (activeDeals.length > 0) {
      message += 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n';
      for (const deal of activeDeals) {
        const isCustomer = deal.customerId === botCtx.userId;
        const role = isCustomer ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
        message += `‚Ä¢ ${deal.order.title} (${role}) - $${(deal.finalPrice / 100).toFixed(2)}\n`;
      }
      message += '\n';
    }

    if (deliveredDeals.length > 0) {
      message += 'üü° –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n';
      for (const deal of deliveredDeals) {
        const isCustomer = deal.customerId === botCtx.userId;
        const role = isCustomer ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
        message += `‚Ä¢ ${deal.order.title} (${role}) - $${(deal.finalPrice / 100).toFixed(2)}\n`;
      }
      message += '\n';
    }

    if (completedDeals.length > 0) {
      message += '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n';
      for (const deal of completedDeals) {
        const isCustomer = deal.customerId === botCtx.userId;
        const role = isCustomer ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
        message += `‚Ä¢ ${deal.order.title} (${role}) - $${(deal.finalPrice / 100).toFixed(2)}\n`;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
    const keyboard = {
      reply_markup: {
        inline_keyboard: deals
          .filter(d => d.status === 'active' || d.status === 'delivered')
          .map(deal => [
            {
              text: `${deal.order.title} - $${(deal.finalPrice / 100).toFixed(2)}`,
              callback_data: `deal_${deal.id}`
            }
          ])
      }
    };

    await ctx.reply(message, keyboard);
    
  } catch (error) {
    console.error('Error in myDeals handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
